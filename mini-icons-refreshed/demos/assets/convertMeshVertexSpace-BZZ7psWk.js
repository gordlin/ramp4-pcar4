import{X as m,s,v as p}from"./main-CXTJrYrk.js";import{p as n}from"./MeshVertexAttributes-D92q6N0B.js";import{B as c}from"./vertexSpaceConversion-CqPHqZyQ.js";import"./preload-helper-ExcqyqRp.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-DCc6xr6i.js";import"./mat4f64-Dk4dwAN8.js";import"./vec32-CY5xch2-.js";import"./spatialReferenceEllipsoidUtils-CGRlc8UX.js";import"./computeTranslationToOriginAndRotation-DTiX0qgj.js";import"./projectBuffer-B5xdwYlr.js";import"./projectPointToVector-CceNmz9B.js";import"./projection-BpKbJTcz.js";import"./meshVertexSpaceUtils-B63ntuwM.js";import"./MeshLocalVertexSpace-CkuW24f-.js";import"./vec3-DB7rKUqi.js";import"./BufferView-D1UxVmcz.js";import"./vec2-maR1OrZI.js";import"./vec42-CKs01hkn.js";import"./vec4-DUK4GCqy.js";async function g(t,r,o){await Promise.resolve(),m(o);const e=c(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{g as convertMeshVertexSpace};
