import{B as c,D as u,bB as A,N as B,J as z,bE as U,a4 as G,V as F,aO as W,gu as H,U as I,O as E,gv as K,gw as $,bF as J}from"./main-CXTJrYrk.js";import{O as T,K as Y}from"./projection-BpKbJTcz.js";import{b as P,g as Q,d as X}from"./kmlUtils-DiHdmQbh.js";import{f as Z}from"./utils-BJxVbeTO.js";import{c as M}from"./GraphicsCollection-C6ZAC8lp.js";import{g as tt,f as it,S as et}from"./BitmapTechnique-B3V8Fira.js";import{r as rt}from"./BitmapContainer-DkmAxJ7w.js";import{S as ot,y as at}from"./LayerView-IKlh2BcD.js";import{t as R}from"./GraphicContainer-BTKMCh_O.js";import{A as k}from"./GraphicsView2D-r60Hu0P9.js";import{z as st,a as nt}from"./rasterProjectionHelper-Byx5HytZ.js";import{n as pt}from"./VertexStream-DurU_cgB.js";import{y as lt,o as mt}from"./RenderingContext-D83jF-gQ.js";import{D as j,G as ht,U as ct,X as L}from"./enums-Dk3osxpS.js";import{x as dt}from"./FramebufferObject-7CLwID_L.js";import{m as ut}from"./rasterUtils-BaolxGqn.js";import{p as q,w as gt}from"./Texture-Ds7WFyAc.js";import"./preload-helper-ExcqyqRp.js";import"./projectBuffer-B5xdwYlr.js";import"./jsonUtils-B0ErHG-A.js";import"./typeUtils-DqqUBGPH.js";import"./ClassBreaksRenderer-DLrpdiEG.js";import"./commonProperties-DSoY-znO.js";import"./colorRamps-Bc3TlUUV.js";import"./ColorStop-C11M1yHu.js";import"./visualVariableUtils-BMjzFwHd.js";import"./lengthUtils-DYdSYbuE.js";import"./RendererLegendOptions-CpFJxlS-.js";import"./LRUCache-BQ-TfHMR.js";import"./MemCache-Bc3OQ0o8.js";import"./Version-BILeeuDB.js";import"./FieldsIndex-CYGegAK0.js";import"./timeZoneUtils-NHmIl2ax.js";import"./utils-4usbGlDx.js";import"./defaultCIMValues-C-9JHzEu.js";import"./enums-CD-fX3vU.js";import"./heatmapUtils-Cvkl1F2j.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./SimpleRenderer-Dcfvqput.js";import"./UniqueValueRenderer-BAAMDLh6.js";import"./styleUtils-DVdmV2u_.js";import"./FeatureSet-9pZlUIRK.js";import"./Field-qWQ4BiqA.js";import"./fieldType-BAY-ZabS.js";import"./mat3-CruJiiUv.js";import"./MapView-DXgmdT1q.js";import"./Cyclical-DQ3B53pC.js";import"./CollectionFlattener-BVW-tHCz.js";import"./workers-CrEdm-cv.js";import"./Queue-B3OINPDR.js";import"./intl-BoGV7K5G.js";import"./TileInfo-BJ3eeYC4.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-BydFCO4_.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-CdH40bjh.js";import"./signal-D6d4F9aP.js";import"./Map-oSjh4lBZ.js";import"./Basemap-DfyMb95H.js";import"./loadAll-DsTFf-qW.js";import"./PortalItem-cvziCImZ.js";import"./writeUtils-B8G77myp.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-DCc6xr6i.js";import"./TablesMixin-Btd2sBIS.js";import"./Layer-CuyN8hRD.js";import"./TimeExtent-pl8UrA47.js";import"./HeightModelInfo-31cT7YRa.js";import"./ReactiveMap-DYumAS5v.js";import"./Query-B3wHXKkM.js";import"./HighlightDefaults-BwX2G67Y.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2-maR1OrZI.js";import"./vec2f64-DohEyf3f.js";import"./Tile-NqUx_OCR.js";import"./TileKey-Box2hZAb.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-DAoTYDOg.js";import"./normalizeUtilsCommon-CuVplVdW.js";import"./utils-Dbwych2S.js";import"./vec2f32-BbH2jxlN.js";import"./Scheduler-Cxu_2o2E.js";import"./vec32-CY5xch2-.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CPtb4TQS.js";import"./imageUtils-Bb_fB6ts.js";import"./capabilities-Du2wdNlQ.js";import"./ColorBackground-Cn_Lrrc5.js";import"./Container-D6RHS8yG.js";import"./parser-B2J_XuA2.js";import"./GraphShaderModule-CmfEnscR.js";import"./ProgramTemplate-CCbPEeb0.js";import"./ShaderBuilder-BZ2kf8c0.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-uMFRS8dR.js";import"./WGLContainer-CFAd6RCr.js";import"./Utils-CC3nR1LQ.js";import"./getDataTypeBytes-DflDeYgv.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-vRY6Idig.js";import"./memoryEstimations-jye8GW5w.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-Bp1wY35y.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-CW4wiU5k.js";import"./OptimizedFeature-D3MECz9o.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./layerViewUtils-BW2OlaJf.js";import"./AGraphicContainer-CGliQzsZ.js";import"./TechniqueInstance-BM_7WYCf.js";import"./UpdateTracking2D-BJsUFXP7.js";import"./BidiEngine-DNnuvc1i.js";import"./GeometryUtils-Dblxd2e_.js";import"./rasterizingUtils-D6Kol5dA.js";import"./floatRGBA-CINiV_az.js";import"./Rect-CUzevAry.js";import"./TileContainer-BRI1qWYH.js";import"./FeatureCommandQueue-f_TD7MRr.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-DlzFxfZS.js";import"./OverrideHelper-DQ74KnII.js";import"./colorUtils-D0_phz0E.js";import"./quantizationUtils-B7DZFVug.js";import"./AttributeStore-BDjxeD35.js";import"./labelUtils-BvsA-TUv.js";import"./queryUtils-C-kNUdUU.js";import"./json-Wa8cmqdu.js";import"./timeSupport-DGM8rCEY.js";import"./TimeOnly-BqaOmD17.js";import"./mat3f64-q3fE-ZOt.js";import"./normalizeUtilsSync-CYNDqRHM.js";import"./dehydratedFeatures-CapsVIgf.js";import"./utils-BxfQDMWD.js";import"./webglDeps-jE-1KsUX.js";import"./NestedMap-CImDozOA.js";import"./renderState-z3Gwc6C8.js";import"./basicInterfaces-CZwQPxTp.js";import"./glsl-BH37Aalp.js";import"./testSVGPremultipliedAlpha-Dc9DSRrz.js";import"./doublePrecisionUtils-B0owpBza.js";let g=class extends z{constructor(){super(...arguments),this.id=0,this.rotation=0,this.href="",this.extent=new A}};c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"id",void 0),c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"rotation",void 0),c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"href",void 0),c([u({type:A,nonNullable:!0,json:{write:!0}})],g.prototype,"extent",void 0),g=c([B("esri.layers.support.KMLMapImage")],g);class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl2");e.getExtension("OES_texture_float"),this._rctx=new lt(e,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},a=mt("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(a.shaders.vertexShader,a.shaders.fragmentShader,a.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new pt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,a=!1){const e=T(t.extent,r),o=new U({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:p,y:l}=st(o,r,t.extent);let n=(p+l)/2;const s=Math.round((e.xmax-e.xmin)/n),w=Math.round((e.ymax-e.ymin)/n);n=(e.width/s+e.height/w)/2;const D=new U({x:n,y:n,spatialReference:e.spatialReference}),x=nt({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:D,hasWrapAround:!0,spacing:[16,16]}),f=ut(this._rctx,x),b=new q(s,w);b.wrapMode=j.CLAMP_TO_EDGE;const h=new dt(this._rctx,b);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,s,w),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(f,1),this._quad.bind();const{width:V=0,height:v=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",V,v),this._program.setUniform2fv("u_transformSpacing",x.spacing),this._program.setUniform2fv("u_transformGridSize",x.size),this._program.setUniform2f("u_targetImageSize",s,w),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),f.dispose(),a){const{width:d,height:C}=h,y=new ImageData(d??0,C??0);h.readPixels(0,0,d??0,C??0,ht.RGBA,ct.UNSIGNED_BYTE,y.data);const O=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:O,extent:e,imageData:y}}const S=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:S,extent:e}}reprojectBitmapData(t,r){const a=tt(t.bitmapData)?it(t.bitmapData):t.bitmapData,e=new q;e.wrapMode=j.CLAMP_TO_EDGE,e.width=t.bitmapData.width,e.height=t.bitmapData.height;const o=new gt(this._rctx,e,a),p=this.reprojectTexture({texture:o,extent:t.extent},r,!0);p.texture.dispose();const l=document.createElement("canvas"),n=p.imageData;return l.width=n.width,l.height=n.height,l.getContext("2d").putImageData(n,0,0),{bitmapData:l,extent:p.extent}}async loadAndReprojectBitmapData(t,r,a){const e=(await G(t,{responseType:"image"})).data,o=document.createElement("canvas");o.width=e.width,o.height=e.height;const p=o.getContext("2d");p.drawImage(e,0,0);const l=p.getImageData(0,0,o.width,o.height);if(r.spatialReference.equals(a))return{bitmapData:l,extent:r};const n=this.reprojectBitmapData({bitmapData:l,extent:r},a);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class N{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let _=class extends ot(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new N,this._fetchController=null,this.allVisiblePoints=new M,this.allVisiblePolylines=new M,this.allVisiblePolygons=new M,this.allVisibleMapImages=new F}async hitTest(i,t){const r=this.layer;return[this._pointsView?.hitTest(i),this._polylinesView?.hitTest(i),this._polygonsView?.hitTest(i)].flat().filter(Boolean).map(a=>(a.layer=r,a.sourceLayer=r,{type:"graphic",graphic:a,layer:r,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new k({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new k({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new k({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),W(()=>this.layer.visibleSublayers,i=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of i){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=H(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=I(this._polygonsView),this._polylinesView=I(this._polylinesView),this._pointsView=I(this._pointsView),this._imageReprojector=I(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference?.isWGS84||this.view.spatialReference?.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,i.extent,this.view.spatialReference).then(t=>{const r=new et(t.bitmapData);r.x=t.extent.xmin,r.y=t.extent.ymax,r.resolution=t.extent.width/t.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:r,viewBoundScale:a,httpQuery:e}=i;if(r!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let o;if(await Y(),a!=null&&a!==1){const d=new A(t.extent);d.expand(a),o=d}else o=t.extent;o=T(o,E.WGS84);const p=T(o,E.WebMercator),l=o.xmin,n=o.xmax,s=o.ymin,w=o.ymax,D=t.size[0]*t.pixelRatio,x=t.size[1]*t.pixelRatio,f=Math.max(p.width,p.height),b={"[bboxWest]":l.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":s.toString(),"[bboxNorth]":w.toString(),"[lookatLon]":o.center.x.toString(),"[lookatLat]":o.center.y.toString(),"[lookatRange]":f.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":o.center.x.toString(),"[lookatTerrainLat]":o.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":o.center.x.toString(),"[cameraLat]":o.center.y.toString(),"[cameraAlt]":f.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":D.toString(),"[vertPixels]":x.toString(),"[terrainEnabled]":"0","[clientVersion]":K,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=d=>{for(const C in d){let y;for(y in b)d[C]=d[C].replace(y,b[y])}},V=$(r);h(V);let v={};e!=null&&(v=$(e),h(v));const S=Z(i.href);return S.query={...S.query,...V,...v},`${S.path}?${J(V)}`}return i.href}async _fetchService(i){const t=new N;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t?.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,r){return this._fetchParsedKML(i,r).then(async a=>{for(const e of a.sublayers){t.allSublayers.set(e.id,e);const o=e.points?await P(e.points):[],p=e.polylines?await P(e.polylines):[],l=e.polygons?await P(e.polygons):[],n=e.mapImages?.map(s=>g.fromJSON(s))??[];if(t.allPoints.push(...o.map(s=>({item:s,sublayerId:e.id}))),t.allPolylines.push(...p.map(s=>({item:s,sublayerId:e.id}))),t.allPolygons.push(...l.map(s=>({item:s,sublayerId:e.id}))),t.allMapImages.push(...n.map(s=>({item:s,sublayerId:e.id}))),e.networkLink){const s=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(s,t,r)}}})}_fetchParsedKML(i,t){return Q(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>X(r.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};c([u()],_.prototype,"_pointsView",void 0),c([u()],_.prototype,"_polylinesView",void 0),c([u()],_.prototype,"_polygonsView",void 0),c([u()],_.prototype,"updating",void 0),_=c([B("esri.views.2d.layers.KMLLayerView2D")],_);const Qe=_;export{Qe as default};
