import{f as m}from"./utils-BJxVbeTO.js";import{a4 as f,bA as y}from"./main-CXTJrYrk.js";import{t as j}from"./query-CJjLYr3d.js";import{d as R}from"./FeatureSet-9pZlUIRK.js";import{d as l}from"./RelationshipQuery-BCsySera.js";import"./preload-helper-ExcqyqRp.js";import"./normalizeUtils-DAoTYDOg.js";import"./normalizeUtilsCommon-CuVplVdW.js";import"./utils-Dbwych2S.js";import"./pbfQueryUtils-CSagF6ro.js";import"./pbf-ByjiIcmx.js";import"./memoryEstimations-jye8GW5w.js";import"./OptimizedFeature-D3MECz9o.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-BpNoM_rt.js";import"./projection-BpKbJTcz.js";import"./projectBuffer-B5xdwYlr.js";import"./Field-qWQ4BiqA.js";import"./fieldType-BAY-ZabS.js";import"./Query-B3wHXKkM.js";import"./TimeExtent-pl8UrA47.js";function b(r,e){const t=r.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!e?.returnCountOnly?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(r,e,t){const n=await p(r,e,t),o=n.data,i=o.geometryType,a=o.spatialReference,s={};for(const c of o.relatedRecordGroups){const d={fields:void 0,objectIdFieldName:void 0,geometryType:i,spatialReference:a,hasZ:!!o.hasZ,hasM:!!o.hasM,features:c.relatedRecords};if(c.objectId!=null)s[c.objectId]=d;else for(const u of Object.keys(c))u!=="relatedRecords"&&(s[c[u]]=d)}return{...n,data:s}}async function h(r,e,t){const n=await p(r,e,t,{returnCountOnly:!0}),o=n.data,i={};for(const a of o.relatedRecordGroups)a.objectId!=null&&(i[a.objectId]=a.count);return{...n,data:i}}async function p(r,e,t={},n){const o=j({...r.query,f:"json",...n,...b(e,n)});return f(r.path+"/queryRelatedRecords",{...t,query:{...t.query,...o}})}async function E(r,e,t){e=l.from(e);const n=m(r);return F(n,e,t).then(o=>{const i=o.data,a={};return Object.keys(i).forEach(s=>a[s]=R.fromJSON(i[s])),a})}async function P(r,e,t){e=l.from(e);const n=m(r);return h(n,e,{...t}).then(o=>o.data)}export{E as executeRelationshipQuery,P as executeRelationshipQueryForCount};
