import{T as g,bE as w,ba as n,dp as y,n as I,x as c,z as f,K as T}from"./main-DUzIKqBe.js";import{c as V}from"./GraphicsCollection-C5MmUv22.js";import"./colorUtils-v-GYKAyk.js";import"./defaultCIMValues-gWpu7WSC.js";import"./enums-f9UUstHQ.js";import"./floatRGBA-CKWS-nN9.js";import"./definitions-CBIQmVpq.js";import"./UpdateTracking2D-b1iHQjVP.js";import"./Rect-CN3o8Yf8.js";import"./CIMSymbolHelper-BTUkXfgt.js";import"./vec2f32-CVhmN3Me.js";import"./OverrideHelper-DhtdEhzU.js";import"./EffectView-D22nxhiu.js";import"./Container-i1HQDscT.js";import{u as H}from"./MapView-CstTrkal.js";import"./WGLContainer-CSwWv0iO.js";import"./enums-DBi1-Mm2.js";import"./Texture-CkNpn-_J.js";import"./dataViewUtils-B1T_70C4.js";import"./config-DB0LnTDt.js";import"./enums-qHpGJ28Q.js";import"./GridShader-D0VyOe3q.js";import"./pbf-Cgwl37gH.js";import"./TechniqueType-GommNIdJ.js";import"./FramebufferObject-dOz_FEuX.js";import"./FeatureCommandQueue-CkrwAdzH.js";import"./PieChartMeshWriter-CCwzB0TC.js";import"./renderState-DlSSrLcZ.js";import"./glsl-o28TenZV.js";import"./testSVGPremultipliedAlpha-DsrhgLkX.js";import{A as v}from"./GraphicsView2D-BsJgIWbO.js";import"./earcut-XDcq3zAf.js";import"./vec3f32-BS0cezmI.js";import"./normalizeUtils-DAQBBrnQ.js";import"./UpdatingHandles-BVTj8KDi.js";import"./projection-CnRwooUH.js";import{r as C,o as p,n as d}from"./imageUtils-D8gIS9ec.js";import{S as q}from"./LayerView2D-kHIzq733.js";import{h as U}from"./HighlightGraphicContainer-D6rLdtVs.js";import{h as b,p as S,r as Q,e as _}from"./Tile-1GF9ofTB.js";import{y as G}from"./LayerView-BZokb1TA.js";import{i as L}from"./RefreshableLayerView-aeoufKj_.js";import{P,S as k}from"./MapServiceLayerViewHelper-BSxITmdX.js";import{r as z}from"./drapedUtils-CjtSjstt.js";import{c as E}from"./HighlightDefaults-BOsKWh4s.js";import{g as F}from"./Scheduler-BxYrsP7D.js";const A=[0,0];let l=class extends L(C(q(G))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new V,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(i){this._fetchQueue.pause(),this._fetchQueue.state=i.state,this._tileStrategy.update(i),this._fetchQueue.resume(),this._highlightView?.processUpdate(i)}attach(){const i="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new b(this.layer.tileInfo,this.layer.fullExtent,e?.effectiveMinLOD,e?.effectiveMaxLOD),this._fetchQueue=new S({tileInfoView:this._tileInfoView,concurrency:i&&10*i.length||10,process:(t,h)=>this.fetchTile(t,h),scheduler:this.scheduler,priority:F.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new Q({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),P(this,this.layer)){const t=this._highlightView=new v({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new U(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(h,s)=>z(h,s,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(h,s)=>{t.graphicUpdateHandler({graphic:h,property:s})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._highlightView?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(i,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(i,e):[]}highlight(i,e){const t=H(i);if(t.length===0)return g();const h=e?.name??E;return this._addHighlightGraphics(t,h),g(()=>!this.destroyed&&this._removeHighlightGraphics(t,h))}_processHighlight(){const i=this._getHighlights();this._highlightView?.setHighlight(i)}_addHighlightGraphics(i,e){this._highlightGraphics.addMany(i),this._addHighlights(i.map(t=>t.uid),e)}_removeHighlightGraphics(i,e){this._highlightGraphics.removeMany(i),this._removeHighlights(i.map(t=>t.uid),e)}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(i){return w(this.layer.tileInfo?.spatialReference,i)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(i=>this._updatingHandles.addPromise(this._enqueueTileFetch(i)))}}acquireTile(i){const e=this._bitmapView.createTile(i),t=e.bitmap;return[t.x,t.y]=this._tileInfoView.getTileCoords(A,e.key),t.resolution=this._tileInfoView.getTileResolution(e.key),[t.width,t.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(i){this._fetchQueue.abort(i.key.id),this._bitmapView.removeChild(i),i.once("detach",()=>i.destroy()),this.requestUpdate()}async fetchTile(i,e={}){return this.tilemapCache?this._fetchTileWithTilemapCache(i,e):this._fetchTileWithoutTilemapCache(i,e)}async _fetchTileWithoutTilemapCache(i,e={}){const{signal:t,resamplingLevel:h=0}=e;try{return await this._fetchImage(i,t)}catch(s){if(n(s))throw s;if(!this.resampling)return p(this._tileInfoView.tileInfo.size);if(h<3){const r=this._tileInfoView.getTileParentId(i.id);if(r){const a=new _(r),o=await this._fetchTileWithoutTilemapCache(a,{...e,resamplingLevel:h+1});return d(this._tileInfoView,o,a,i)}}return p(this._tileInfoView.tileInfo.size)}}async _fetchTileWithTilemapCache(i,e={}){const t=this.tilemapCache,{signal:h,resamplingLevel:s=0}=e,r=new _(0,0,0,0);let a,o=null;try{if(o=await t.fetchAvailabilityUpsample(i.level,i.row,i.col,r,{signal:h}),!this.resampling&&r.level!==i.level)return await y(e),p(this._tileInfoView.tileInfo.size);a=await this._fetchImage(r,h)}catch(m){if(n(m))throw m;if(this.resampling&&o==="unknown"&&s<3){const u=this._tileInfoView.getTileParentId(i.id);if(u){r.set(u);try{a=await this._fetchTileWithTilemapCache(r,{...e,resamplingLevel:s+1})}catch{}}}}return a?this.resampling?d(this._tileInfoView,a,r,i):a:p(this._tileInfoView.tileInfo.size)}async _enqueueTileFetch(i){if(!this._fetchQueue.has(i.key.id)){try{const e=await this._fetchQueue.push(i.key);i.bitmap.source=e,i.bitmap.width=this._tileInfoView.tileInfo.size[0],i.bitmap.height=this._tileInfoView.tileInfo.size[1],i.once("attach",()=>this.requestUpdate())}catch(e){n(e)||I.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(i,e){return this.layer.fetchImageBitmapTile(i.level,i.row,i.col,{signal:e})}};c([f()],l.prototype,"resampling",null),c([f()],l.prototype,"tilemapCache",null),l=c([T("esri.views.2d.layers.TileLayerView2D")],l);const W=l;export{W as default};
